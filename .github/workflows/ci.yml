name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  checks: write
  packages: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore Webhooks.slnx

      - name: Build
        run: dotnet build Webhooks.slnx --configuration Release --no-restore

      - name: Test with coverage
        run: |
          dotnet test Webhooks.slnx \
            --configuration Release \
            --no-build \
            --logger "trx;LogFilePrefix=test_results_" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      - name: Publish test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            TestResults/**/*.trx

      - name: Report test summary
        if: always()
        uses: dorny/test-reporter@v2
        with:
          artifact: test-results    # artifact name
          name: dotnet tests        # Name of the check run which will be created
          path: '*.trx'             # Path to test results (inside artifact .zip)
          reporter: dotnet-trx

      - name: Collect coverage artifacts
        if: always()
        run: |
          mkdir -p coverage
          find TestResults -type f -name "coverage.cobertura.xml" -exec cp {} coverage/ \;
          find TestResults -type f -name "coverage.info" -exec cp {} coverage/ \;
          find TestResults -type f -name "coverage.json" -exec cp {} coverage/ \;

      - name: Report coverage summary
        if: always()
        run: |
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          file=$(ls coverage/coverage.cobertura.xml 2>/dev/null | head -n1)
          if [ -z "$file" ]; then
            file=$(ls coverage/*.cobertura.xml 2>/dev/null | head -n1)
          fi
          if [ -n "$file" ]; then
            total=$(sed -n 's/.*line-rate="\([0-9.]*\)".*/\1/p' "$file" | head -n1)
            if [ -n "$total" ]; then
              pct=$(awk -v t="$total" 'BEGIN { printf "%.2f", t*100 }')
              echo "Total line coverage: ${pct}%" >> $GITHUB_STEP_SUMMARY
            else
              echo "Cobertura found but couldn't parse percentage." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No Cobertura coverage file found." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Publish coverage as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
  publish-packages:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install minver
        run: dotnet tool install --global minver-cli --version 6.0.0

      - name: Restore
        run: dotnet restore Webhooks.slnx

      - name: Build
        run: dotnet build Webhooks.slnx --configuration Release --no-restore

      - name: Pack NuGet packages
        run: |
          version=$(minver -v e -t runtime-)
          mkdir -p artifacts
          dotnet pack src/Webhooks.Publishers/Webhooks.Publishers.csproj \
            --configuration Release --no-build -p:PackageVersion=$version -p:ContinuousIntegrationBuild=true -o ./artifacts
          dotnet pack src/Webhooks.Receivers/Webhooks.Receivers.csproj \
            --configuration Release --no-build -p:PackageVersion=$version -p:ContinuousIntegrationBuild=true -o ./artifacts
      - name: Publish NuGet packages
        run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/davidelettieri/index.json
